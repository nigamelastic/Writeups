from Crypto.PublicKey import RSA
from Crypto.Util.number import long_to_bytes

class LCG:
    lcg_m = config.m
    lcg_c = config.c
    lcg_n = config.n

    def __init__(self, lcg_s):
        self.state = lcg_s

    def next(self):
        self.state = (self.state * self.lcg_m + self.lcg_c) % self.lcg_n
        return self.state


# Read the contents of the encrypted flag file
with open("flag.txt", "rb") as encrypted_flag_file:
    encrypted_flag = int.from_bytes(encrypted_flag_file.read(), "little")
first_value_1 = 2166771675595184069339107365908377157701164485820981409993925279512199123418374034275465590004848135946671454084220731645099286746251308323653144363063385
first_value_2 = 6729272950467625456298454678219613090467254824679318993052294587570153424935267364971827277137521929202783621553421958533761123653824135472378133765236115
first_value_3 = 2230396903302352921484704122705539403201050490164649102182798059926343096511158288867301614648471516723052092761312105117735046752506523136197227936190287
first_value_4 = 4578847787736143756850823407168519112175260092601476810539830792656568747136604250146858111418705054138266193348169239751046779010474924367072989895377792
first_value_5 = 7578332979479086546637469036948482551151240099803812235949997147892871097982293017256475189504447955147399405791875395450814297264039908361472603256921612
first_value_6 = 2550420443270381003007873520763042837493244197616666667768397146110589301602119884836605418664463550865399026934848289084292975494312467018767881691302197
# Initialize the LCG with the first six consecutive values
lcg_seed = [first_value_1, first_value_2, first_value_3, first_value_4, first_value_5, first_value_6]
lcg = LCG(lcg_seed)

# Generate prime numbers using the LCG
primes_arr = []
primes_n = 1

for _ in range(config.it):
    while True:
        prime_candidate = lcg.next()
        if isPrime(prime_candidate) and prime_candidate.bit_length() == config.bits:
            primes_n *= prime_candidate
            primes_arr.append(prime_candidate)
            break

# Calculate the public key 'n'
n = 1
for prime in primes_arr:
    n *= prime

# Calculate Euler's totient 'phi(n)'
phi = 1
for prime in primes_arr:
    phi *= (prime - 1)

# Calculate the private key 'd'
d = pow(config.e, -1, phi)

# Decrypt the flag
decrypted_flag = pow(encrypted_flag, d, n)

# Convert the decrypted flag to bytes
flag_bytes = long_to_bytes(decrypted_flag)

# Save the decrypted flag to a file or display it
with open("decrypted_flag.txt", "wb") as decrypted_flag_file:
    decrypted_flag_file.write(flag_bytes)

